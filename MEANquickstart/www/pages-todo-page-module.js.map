{"version":3,"sources":["webpack:///./src/app/pages/todo-page/module.ts","webpack:///./src/app/pages/todo-page/routes.ts","webpack:///./src/app/pages/todo-page/todo-page.component.html","webpack:///./src/app/pages/todo-page/todo-page.component.ts","webpack:///./src/app/services/todo/todo.service.ts"],"names":[],"mappings":"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","file":"pages-todo-page-module.js","sourcesContent":["/*\nImports\n*/\n    // Angular components\n    import { NgModule } from \"@angular/core\";\n    import { ComponentRouter } from \"./routes\";\n    import { CommonModule } from \"@angular/common\";\n\n    // APP components\n    import { AppFormModule } from \"../../shared/form-modules/form.module\";\n    import { UserInterfaceModule } from \"../../shared/user-interface/user-interface.module\";\n    import { TodoPageComponent } from \"./todo-page.component\";\n//\n\n/*\nDefinition\n*/\n    @NgModule({\n        declarations: [ TodoPageComponent ],\n        imports: [ ComponentRouter, AppFormModule, UserInterfaceModule, CommonModule ]\n    })\n//\n\n/*\nExport\n*/\n    export class TodoPageModule {};\n//","/*\nImport\n*/\n    import { ModuleWithProviders } from '@angular/core';\n    import { Routes, RouterModule } from \"@angular/router\";\n\n    import { TodoPageComponent } from \"./todo-page.component\";\n//\n\n/*\nDefinition\n*/\n    const routes: Routes = [\n        {\n            path: '',\n            component: TodoPageComponent\n        }\n    ]\n//\n\n/*\nExport\n*/\n    export const ComponentRouter: ModuleWithProviders = RouterModule.forChild(routes)\n//","module.exports = \"<app-my-header\\n  [path]=\\\"'/todo'\\\"\\n  \\n></app-my-header>\\n\\n<app-todo-from\\n  [formObject]=\\\"todoObject\\\"\\n  (sendFormData)=\\\"registerNewTodo($event)\\\"\\n\\n></app-todo-from>\\n\\n<section *ngIf=\\\"todoCollection\\\">\\n  \\n  <div *ngFor=\\\"let item of todoCollection\\\">\\n    <app-todo-item\\n      [todo]=\\\"item\\\"\\n      (todoInfos)=\\\"modifyTodo($event)\\\"\\n\\n    ></app-todo-item>\\n  </div>\\n\\n</section>\"","/*\nImports\n*/\n  // Angular components\n  import { Component, OnInit } from '@angular/core';\n  import { Router } from \"@angular/router\";\n\n  // APP components\n  import { UserService } from \"../../services/user/user.service\";\n  import { TodoService } from \"../../services/todo/todo.service\";\n  import { TodoModel } from \"../../models/todo.model\";\n//\n\n/*\nDefintion\n*/\n  @Component({\n    selector: 'app-todo-page',\n    templateUrl: './todo-page.component.html',\n\n    // Les services sont à ajouter dans le tableau des providers\n    providers: [ UserService, TodoService ]\n  })\n//\n\n/*\nExport\n*/\n  export class TodoPageComponent implements OnInit {\n\n    private userToken: String;\n    public todoCollection: Array<TodoModel>;\n\n    public todoObject: TodoModel = {\n      content: ``\n    }\n    \n    // Injection des services et du router\n    constructor(\n      private userService: UserService,\n      private todoService: TodoService,\n      private router: Router\n    ) { }\n\n    // Creaétion d'une fonction pour chager les todoes\n    private fetchTodoes = () =>{\n      // Contacter le service pour récupérer les todoes\n      this.todoService.getTodoes()\n      .then( (apiResponse) => {\n        console.log(apiResponse)\n        this.todoCollection = apiResponse.data;\n      })\n      .catch( (apiResponse) => {\n        console.error( apiResponse )\n      })\n    }\n\n    // Création d'une fonction pour connecter automatiquement l'utilisateur avec son token\n    private checkUserToken = () => {\n      if(this.userToken != undefined){\n        // Contacter le service pour inscrire l'utilisateur\n        this.userService.getUserInfos(this.userToken)\n        .then( (apiResponse) => {\n          console.log(apiResponse)\n        })\n        .catch( () => {\n          // Rediriger l'utilisateur vers la page todo\n          this.router.navigateByUrl('/');\n\n          // Supprimer le faux token\n          localStorage.removeItem('MEANtoken')\n        })\n\n      } else{\n        // Rediriger l'utilisateur vers la home page\n        this.router.navigateByUrl('/');\n      }\n    }\n\n    // Création d'une fonction pour ajouter une todo\n    public registerNewTodo = ( todo: TodoModel ) => {\n      // Contacter le service pour ajouter une todo\n      this.todoService.addNewTodo( todo, this.userToken )\n      .then( (apiResponse) => {\n        console.log(apiResponse)\n        this.fetchTodoes()\n      })\n      .catch( (apiResponse) => {\n        console.error( apiResponse )\n      })\n\n    };\n\n    // Création d'une fonction pour éditer/supprimer une todo\n    public modifyTodo = ( event: any ) => {\n      if( event.action === 'edit' ){\n        this.todoService.editTodo(event._id, this.userToken)\n        .then( (apiResponse) => {\n          console.log(apiResponse)\n          this.fetchTodoes()\n        })\n        .catch( (apiResponse) => {\n          console.error( apiResponse )\n        })\n      }\n\n      if( event.action === 'delete' ){\n        this.todoService.deleteTodo(event._id, this.userToken)\n        .then( (apiResponse) => {\n          console.log(apiResponse)\n          this.fetchTodoes()\n        })\n        .catch( (apiResponse) => {\n          console.error( apiResponse )\n        })\n      }\n    }\n\n    ngOnInit() {\n      // Récupérer le token au chargement du composant\n      this.userToken = localStorage.getItem('MEANtoken');\n\n      // Appeler la fonction pour vérifier le token utilisateur\n      this.checkUserToken();\n\n      // Charger la liste de todoes\n      this.fetchTodoes();\n    }\n\n  }\n//","/*\nImports\n*/\n  import { Injectable } from '@angular/core';\n  import { HttpClient, HttpHeaders } from \"@angular/common/http\";\n  import { TodoModel } from \"../../models/todo.model\";\n//\n\n/*\nDefinition\n*/\n  @Injectable({\n    providedIn: 'root'\n  })\n//\n\n/*\nExport\n*/\n  export class TodoService {\n\n    // Définir l'adresse de l'API\n    private apiUrl = '/api/todo'\n\n    // Injecter le service HttpCLient dans la class\n    constructor(\n      private http: HttpClient\n    ) { }\n\n    // Créer une fonction afficher les Todo\n    public getTodoes(): Promise<any> {\n      // Utiliser une requête HTTP GET\n      return this.http.get(`${this.apiUrl}`)\n      .toPromise().then(this.getData).catch(this.handelError)\n    }\n\n    // Créer une fonction pour ajouter une todo\n    public addNewTodo( todo: TodoModel, token: String ): Promise<any> {\n      // Configurer la requête\n      let myHeader = new HttpHeaders().set( 'Authorization', `Bearer ${token}`)\n\n      // Utiliser une requête HTTP GET\n      return this.http.post(`${this.apiUrl}`, todo, { headers: myHeader })\n      .toPromise().then(this.getData).catch(this.handelError)\n    }\n\n    // Créer une fonction pour modifier une todo\n    public editTodo( idParam: String, token: String ): Promise<any> {\n      // Configurer la requête\n      let myHeader = new HttpHeaders().set( 'Authorization', `Bearer ${token}`)\n\n      // Utiliser une requête HTTP GET\n      return this.http.put(`${this.apiUrl}`, { _id: idParam }, { headers: myHeader })\n      .toPromise().then(this.getData).catch(this.handelError)\n    }\n\n    // Créer une fonction pour modifier une todo\n    public deleteTodo( id: String, token: String ): Promise<any> {\n      // Configurer la requête\n      let myHeader = new HttpHeaders().set( 'Authorization', `Bearer ${token}`)\n\n      // Utiliser une requête HTTP GET\n      return this.http.delete(`${this.apiUrl}/${id}`, { headers: myHeader })\n      .toPromise().then(this.getData).catch(this.handelError)\n    }\n\n    // Fonction pour traiter les success des requêtes\n    private getData( response: any ){\n      // return res || {};\n      return Promise.resolve( response || {} );\n    }\n\n    // Fonction pour traiter les erreurs des requête\n    private handelError( response: any ){\n      return Promise.reject( response.error );\n    }\n  }\n//"],"sourceRoot":""}